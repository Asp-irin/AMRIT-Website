---

import MapSvg from "@/components/programs/MapSvg.astro";

const {
  impact
} = Astro.props;
---

<div
  class="min-h-screen py-8 px-4 sm:px-6 lg:px-8"
>
  <div class="max-w-7xl mx-auto">
    <h1 class="text-center my-8">{impact.title}</h1>
    <p class="text-center my-8">{impact.subtitle}</p>
    <div class="flex flex-col lg:flex-row gap-8 items-start">
      <!-- Map Section -->
      <div class="w-full lg:w-1/2 bg-white rounded-2xl shadow-md p-6 order-2 md:order-1">
        <div class="aspect-square max-h-[600px] m-auto md:max-h-full">
          <MapSvg />
        </div>
      </div>

      <!-- Program Details Section -->
      <div class="w-full lg:w-1/2 space-y-6 order-1 md:order-2">
        <!-- Program Selection -->
        <div class="bg-white rounded-2xl shadow-md p-6">
          <label
            for="programSelect"
            class="block text-lg font-semibold text-gray-900 mb-3"
          >
            Select Program
          </label>
          <select
            id="programSelect"
            data-object={JSON.stringify(impact.deployments)}
            class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
          >
            {
              Object.keys(impact.deployments).map((programKey) => (
                <option value={programKey}>
                  {
                    impact.deployments[programKey as keyof typeof deploymentData]
                      .programName
                  }
                </option>
              ))
            }
          </select>

          <!-- Program Description -->
          <div class="mt-6">
            <h3
              id="programName"
              class="text-xl font-semibold text-gray-900 mb-2"
            >
            </h3>
            <p id="programDescription" class="text-gray-600"></p>
          </div>
        </div>

        <!-- Program Stats -->
        <div class="bg-white rounded-2xl shadow-md p-6">
          <h4 class="text-lg font-semibold text-gray-900 mb-4">
            Program Statistics
          </h4>
          <div
            id="programStats"
            class="grid grid-cols-2 sm:grid-cols-3 gap-4"
          >
            <!-- Stats will be populated by JavaScript -->
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  const programSelectElement = document.querySelector("[data-object]");
  const deploymentData = JSON.parse(
    programSelectElement?.getAttribute("data-object") || "{}"
  );

  const dropdown = document.getElementById("programSelect");
  const svg = document.getElementById("ind-map");
  const programNameElement = document.getElementById("programName");
  const programDescriptionElement =
    document.getElementById("programDescription");
  const programStatsElement = document.getElementById("programStats");

  function formatNumber(num: number) {
    if (num >= 1000000) {
      return (num / 1000000).toFixed(1) + "M";
    } else if (num >= 1000) {
      return (num / 1000).toFixed(1) + "K";
    }
    return num.toString();
  }

  function updateProgramInfo(programKey: string) {
    const program = deploymentData[programKey];
    if (!program) return;

    if (programNameElement) {
      programNameElement.textContent = program.programName;
    }
    if (programDescriptionElement) {
      programDescriptionElement.textContent = program.description;
    }

    // Update stats
    const stats = program.stats;
    if (programStatsElement) {
      programStatsElement.innerHTML = "";
    }

    Object.entries(stats).forEach(([key, value]) => {
      const formattedKey = key
        .replace(/([A-Z])/g, " $1")
        .toLowerCase()
        .split(" ")
        .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
        .join(" ");

      const statCard = document.createElement("div");
      statCard.className = "bg-gray-50 p-4 rounded-lg";
      statCard.innerHTML = `
          <div class="text-lg font-semibold text-gray-900">${formatNumber(value as number)}</div>
          <div class="text-sm text-gray-600 mt-1">${formattedKey}</div>
        `;
      if (programStatsElement) {
        programStatsElement.appendChild(statCard);
      }
    });
  }

  function highlightStates(states: string[]) {
    if (svg) {
      Array.from(svg.childNodes).forEach((node) => {
        if (node.nodeType === Node.ELEMENT_NODE) {
          const element = node as Element;
          if (states.includes(element.id)) {
            (element as HTMLElement).style.fill = "#ff8567";
            (element as HTMLElement).style.cursor = "pointer";
            element.classList.add("transition-colors", "duration-300");
          } else {
            (element as HTMLElement).style.fill = "#f0f0f0";
            (element as HTMLElement).style.cursor = "default";
            element.classList.remove("transition-colors", "duration-300");
          }
        }
      });
    }
  }

  if (dropdown) {
    dropdown.addEventListener("change", (event) => {
      const selectedProgram = (event.target as HTMLSelectElement).value;
      const states = deploymentData[selectedProgram]?.states || [];
      highlightStates(states);
      updateProgramInfo(selectedProgram);
    });

    // Initial update
    const initialProgram = (dropdown as HTMLSelectElement).value;
    highlightStates(deploymentData[initialProgram]?.states || []);
    updateProgramInfo(initialProgram);
  }
</script>
